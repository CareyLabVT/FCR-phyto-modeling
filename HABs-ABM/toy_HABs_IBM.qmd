---
title: "example IBM for lake phytoplankton"
author: "Mary Lofton"
format: html
editor: visual
---

## Provenance

The code below is adapted from <https://bradduthie.github.io/blog/individual-based-models-in-r/>.

## Modification workflow

1.  Random movement in one dimension of individuals seeded from a simulated depth profile, with a "sticky" upper/lower boundary
    1.  Eliminate x-dimension - check

    2.  Individuals move in increments of 0.1 m - check

    3.  Create "sticky" boundaries (individuals who move past the boundary are put back at the edge) - check

    4.  Seed individuals based on a depth profile from 0-9.3 m in 0.1 m increments, using an actual FP profile as a starting point - check

    5.  Eliminate birth and death for now and predators altogether - check

    6.  Alter plot so that you can see how individuals are moving over depth/time - check
2.  Movement of individuals given static water temp profile using turbulence/diffusion equation
    1.  Create a new dataframe for environmental conditions that can be referenced during model run (columns for now are depth, water temperature); start w/ constant water temperature so can see if phytos move towards constant distribution across depth over time - check

    2.  Figure out what other environmental conditions/traits need to be specified to provide all the correct information to eq. 9 of Hassan Ranjbar, Hamilton, et al. - check

        1.  cell density: \~950 kg m-3 for buoyant cyanos; \~1100 kg m-3 for diatoms (reference Reynolds 2006)

        2.  cell diameter: in meters; thinking somewhere in 10-20 um for FCR since cells usually small

        3.  cell shape: use 1 as a starting point (assuming spherical shape)

    3.  Add necessary environmental conditions/traits to environmental dataframe and inds, respectively

        1.  need to calculate dynamic (absolute) viscosity of water; use Korson et al. 1969

        2.  what eq to use to calculate water density from temperature? think might assume pure water for now and use Kell equation (Kell, 1975), then can go from there

    4.  Edit "movement" function to use eq. 9 instead of random movement

        1.  first, just incorporate buoyancy/sinking rate term and make sure phytos are behaving as expected in stratified and unstratified conditions - check

        2.  next, worry about random walk to simulate turbulent transport --\> key here is if we want to use Visser's random walk formulation (which is well-established and probably a good choice) need to calculate vertical diffusivity from water temperature - check

            1.  fun fact, apparently the Visser random walk model has to operate at a time scale on the order of 1-60 s in order to be valid --\> this is crazy! (see Ross & Sharples 2004) and explains why Feng et al 2018 are operating on a 1-minute timestep, so now need to decide whether to move the whole model over to a minute (or shorter) timestep or how else I am going to handle that

                1.  first, make sure movement code is working properly at a minute or sub-minute timestep with birth and death shut off; get an idea of runtimes, outcomes, etc. - check

                2.  next, figure out if can adjust birth/death functions to shorter timestep, just knowing that environment won't be updated at every timestep - check

        3.  alternatively, if we are not going into forecasting mode and are just "coupling" to GLM, use CCC's sim to get u_mean output for each layer and assume cells are transported along with that --\> nope, this will not work b/c u_mean is actually u_star, which is the water friction velocity, not a flow field

            1.  however, that will be really helpful when coupling GLM b/c we can get density and u_star from GLM output easily; however I'm not clear on how u_star can be a vector over depth; I thought it was one value per profile; need to check GLM output on this

    5.  Edit "death" function

        1.  agents that reach the sediments die - check

        2.  agents can also be grazed, which should occur at different rates depending on the taxon; see p. 299 of Reynolds; "brown algae" and green algae should have highest rate, as Cryptomonas is \~100%, Asterionella is \>50% in the summer, and small chlorophytes ("Ankyra"), such as found in FCR, are almost 100% - check

        3.  after build in light-dependent growth, could also keep track of light exposure and if an agent has seen no light for 24 hrs, it dies - check

        4.  what to do about endless cyano scums accumulating at the surface? (i.e., how to kill them? photorespiration?)

            1.  solved this by switching out light-dependent growth to one with photoinhibition - check

        5.  what to do about taxa dying off altogether?

            1.  maybe have a "seed bank" where there can't be fewer than 1 individual per PFT per depth (that individual is always saved to potentially repopulate)

    6.  Edit "growth" function

        1.  temperature-dependent growth rate, adapted from AED; probability of doubling is determined by temperature - check

        2.  add light column to environment; this will be calculated based on some incoming SWR and some Kd - check

        3.  light-dependent growth rate, adapted from AED; probability of doubling is determined by maximum (or minimum? or multiplied?) probability between temp and light functions - check

    7.  Introduce environment that varies over time

        1.  use GLM-AED output to update water temperature, density, and light (?) once per hour

            1.  plot EXO data for 2021-06-01 to 2021-09-30 at 1.6 m - check

            2.  plot FP data for 2021-06-01 to 2021-09-30 at 1.6 m - check

            3.  get GLM-AED output for 2021-06-01 to 2021-09-30 - check

            4.  plot GLM-AED water temperature, chl-a, and three groups at 1.6 m - check

            5.  calculate RMSE of GLM-AED of chl-a at 1.6 m for 2021-06-01 to 2021-09-30 - check

            6.  decide what time period to calibrate, then validate (a 48-hr period; should include an FP cast) - check

                1.  calibrate on 2021-08-09; validate on 2021-08-16

            7.  revise model code to pull in GLM-AED output to update water temperature profiles - check

        2.  goal of running for 12-24 hr, depending on run times

            1.  try from 5 a.m. to 8 p.m. so SWR is not 0 for this initial testing

    8.  Calibrate model

        1.  stick w/ manual calibration for now, calibrated to EXO data FIRST, then FP profile data SECOND

            1.  write plot to get timeseries of chl-a and "total biomass" at 1.6 m from IBM output, GLM-AED output, EXO, and FP (total - crypto); this is Panel A for proposal

                1.  use multiplier to convert total biomass (FP) to chl-a (EXO); this can be tuned

            2.  write code to calculate RMSE of total chl-a at 1.6 m from IBM compared to EXO as well as FP total - cryptos

            3.  write plot to get depth profile of three groups (brown algae, cyanos, green algae) from IBM output and FP

            4.  write code to calculate RMSE of each group at all depths (or maybe just every meter?) compared to FP

            5.  calibrate on day 1, then run day 2

    9.  Plot for proposal

        1.  panel A: timeseries of EXO, FP, GLM-AED chl-a, IBM "total", and IBM chl-a

        2.  panel B: depth profile of brown algae, green algae, and cyano comparing IBM to FP

```{r}
# =============================================================================
# Load packages
# =============================================================================
library(tidyverse)
library(rLakeAnalyzer)


```

```{r}
# =============================================================================
# Movement function
# =============================================================================
movement <- function(inds, env, yloc = 2, ymax = 9.3, wnd = 3){
  
  total_inds <- dim(inds)[1]
  
  cell_diam <- inds[,3] # Get the cell diameters of all individuals
  cell_dens <- inds[,4] # Get the cell densities of all individuals
  cell_shape <- inds[,5] # Get the cell shapes of all individuals

  #calculate water density
  env[,3] <- (999.83952 + 16.945176*env[,1] - 0.0079870401*env[,1]^2 - 0.000046170461*env[,1]^3 + 0.00000010556302*env[,1]^4 - 0.00000000028054253*env[,1]^5) / (1 + 0.016879850*env[,1]) #Kell equation for water density (Kell, 1975)
  
  #calculate water viscosity
  env[,4] <- (10^(((20 - env[,1])/(env[,1] + 96))*(1.2364 - 0.00137*(20 - env[,1]) + 0.0000057*(20 - env[,1])^2)))*1000 #this actually calculates the ratio of viscosity at target temp/viscosity at 20 degrees C, but viscosity at 20 degrees C is ~ 1
  
  #specify model timestep
  del_t = 60 #in seconds
    
  #calculate u_star (shear velocity)
  td = thermo.depth(wtr = env[,1], depths = env[,2])
  avgEpiDense = mean(env[which(env[,2] <= td),3])
  u_star = uStar(wndSpeed = wnd, wndHeight = 3, averageEpiDense = avgEpiDense)

  #loop through and calculate individual movement
  for(j in 1:total_inds){
      
    curr_dens <- env[which(env[,2] == round(inds[j,2],1)),3]
    curr_visc <- env[which(env[,2] == round(inds[j,2],1)),4]

    w_s <- ((9.8081*cell_diam[j]^2*(cell_dens[j] - curr_dens))/(18*cell_shape[j]*curr_visc))/100000 # Define the cell velocity given cell diameter, density, and shape
    

  ####### Attempt at random walk ###############################################
  
  #pull individual's depth
  z <- inds[j, yloc]
    
  #specify K (vertical eddy diffusivity)
  K = 0.4*u_star*9.3*((9.3 - z)/9.3)*(1-((9.3 - z)/9.3)) + 0.00001
    
  #specify K_prime
  K_prime = 0.4 * u_star * 9.3 * ((9.3 - z)/9.3) * (1/9.3) - 0.4 * u_star * 
    9.3 * (1/9.3) * (1 - ((9.3 - z)/9.3))
    
  # ## calculation of function for K_prime ################
  # f = expression(0.4*u_star*9.3*((9.3 - z)/9.3)*(1-((9.3 - z)/9.3)) + 0.00001)
  # K_prime_eq = D(f, "z")
  # K_prime_eq
  # K_prime2_eq = D(K_prime_eq, "z")
  # K_prime2 = -(0.4 * u_star * 9.3 * (1/9.3) * (1/9.3) + 0.4 * u_star * 9.3 * 
  #   (1/9.3) * (1/9.3))
  # #######################################################
  
  #specify random walk
  elev <- ymax - z
    
  z_t1 <- elev + K_prime*elev*del_t + runif(1, min = -1,max = 1)*sqrt((2*K*(elev + 0.5*K_prime*elev*del_t)*del_t)/(1/3)) + w_s*del_t
  
  ####### end test code #######################################################
  inds[j, yloc] <- 9.3 - z_t1
  
    }
    
  
  # =========   The reflecting boundary is added below
    for(i in 1:total_inds){ 
        if(inds[i, yloc] > ymax){         # If it moved past the maximum depth
            inds[i, yloc] <- ymax;        # Then move it back to the maximum depth
        }
        if(inds[i, yloc] < 0.5){            # If it is close to top boundary
            inds[i, yloc] <- runif(1, min = 0.1, max = 0.5);           # Create random mixed layer
        }
        if(inds[i, yloc] < 0.1){            # If it moved below 0.1 (above surface)
            inds[i, yloc] <- 0.1;           # Then move it back to 0.1 (surface)
        }
    } 
    # =========  Now all individuals should stay on the landscape
    return(inds);
}
```

```{r}
# =============================================================================
# Birth function
# =============================================================================
## define traits for PFTs
traits_lst <- list(
  #create cell diameter trait
  min_diam.d = 10, # 10 um 
  max_diam.d = 25, # 25 um in meters
  
  min_diam.c = 10, # 10 um 
  max_diam.c = 25, # 25 um in meters
  
  min_diam.g = 10, # 10 um 
  max_diam.g = 25, # 25 um in meters

  #create cell density trait
  min_dens.d = 1070, # In range for diatoms
  max_dens.d = 1130, # To make sure they all sink
  
  min_dens.c = 920, # In range for cyanos
  max_dens.c = 980, # To make sure they all float
  
  min_dens.g = 1020, # In range for chlorophytes
  max_dens.g = 1080, # To make sure they all sink
  
  #create cell shape trait
  shape.d = 1, # make them all spherical for now
  
  shape.c = 1, # make them all spherical for now
  
  shape.g = 1, # make them all spherical for now
  
  #create temperature sensitivity traits
  Tmin = c(4,4,4),
  Topt = c(23,23,23),
  Tmax = c(30,30,30),
  I_S = c(300,300,300)
)

birth <- function(inds, repr_col = 7, traits = traits_lst){
    total_inds       <- dim(inds)[1]; # Get the number of individuals in inds
    ind_cols         <- dim(inds)[2]; # Total inds columns
    
    #unpack traits
    min_diam.d = traits$min_diam.d
    max_diam.d = traits$max_diam.d
    min_diam.c = traits$min_diam.c
    max_diam.c = traits$max_diam.c
    min_diam.g = traits$min_diam.g
    max_diam.g = traits$max_diam.g
    min_dens.d = traits$min_dens.d
    max_dens.d = traits$max_dens.d
    min_dens.c = traits$min_dens.c
    max_dens.c = traits$max_dens.c
    min_dens.g = traits$min_dens.g
    max_dens.g = traits$max_dens.g
    shape.d = traits$shape.d
    shape.c = traits$shape.c
    shape.g = traits$shape.g
    Tmin = traits$Tmin
    Topt = traits$Topt
    Tmax = traits$Tmax
    I_S = traits$I_S
    
    ###Temp-dependent growth
    for(i in 1:total_inds){
      
      #get water temp and SWR where individual is located
      TEMP <- env[which(env[,2] == round(inds[i,2],1)),1]
      SWR <- env[which(env[,2] == round(inds[i,2],1)),5]
      
      if(inds[i,1] == 1){ #diatoms
        
    #temp-dependent growth
    fT = ((TEMP - Tmin[1]) / (Topt[1] - Tmin[1])) *((Tmax[1] - TEMP) / (Tmax[1] - Topt[1])) ^((Tmax[1] - Topt[1]) / (Topt[1] - Tmin[1]))
  if(fT < 0 | is.na(fT)){fT <- 0}
    
    #light-dependent growth with photoinhibition
    fI = (SWR/I_S[1]) * exp(1 - (SWR/I_S[1]))
    if(SWR < 5e-5 | fI < 5e-5){fI = 0.0}

      }
      
      if(inds[i,1] == 2){ #cyanos
        
    #temp-dependent growth
    fT = ((TEMP - Tmin[2]) / (Topt[2] - Tmin[2])) *((Tmax[2] - TEMP) / (Tmax[2] - Topt[2])) ^((Tmax[2] - Topt[2]) / (Topt[2] - Tmin[2]))
  if(fT < 0 | is.na(fT)){fT <- 0}
    
    #light-dependent growth
    fI = (SWR/I_S[2]) * exp(1 - (SWR/I_S[2]))
    if(SWR < 5e-5 | fI < 5e-5){fI = 0.0}

      }
      
      if(inds[i,1] == 3){ #green algae
        
    #temp-dependent growth
    fT = ((TEMP - Tmin[3]) / (Topt[3] - Tmin[3])) *((Tmax[3] - TEMP) / (Tmax[3] - Topt[3])) ^((Tmax[3] - Topt[3]) / (Topt[3] - Tmin[3]))
  if(fT < 0 | is.na(fT)){fT <- 0}
    
    #light-dependent growth
    fI = (SWR/I_S[3]) * exp(1 - (SWR/I_S[3]))
    if(SWR < 5e-5 | fI < 5e-5){fI = 0.0}

      }
      
    inds[i, repr_col] <- rbinom(n = 1, size = 1, prob = fT*fI/60)

    }
    
    #make array for offspring
    new_inds <- array(data = 0, dim = c(0, ind_cols))
    
    #figure out how many offspring of each PFT per depth
    for(j in 1:length(env[,2])){
      
    total_off_d <- sum(inds[which(inds[,1] == 1 & round(inds[,2],1) == env[j,2]), repr_col])
    total_off_c <- sum(inds[which(inds[,1] == 2 & round(inds[,2],1) == env[j,2]), repr_col])
    total_off_g <- sum(inds[which(inds[,1] == 3 & round(inds[,2],1) == env[j,2]), repr_col])

    # ---- We now have the total number of new offspring for each PFT at this depth; now add traits
    
    #diatoms
    temp.df.d <- array(data = 0, dim = c(total_off_d, ind_cols))
    temp.df.d[,1] <- 1 #placeholder for taxon ID or some other trait
  temp.df.d[,2] <- env[j,2]
  temp.df.d[,3] <- runif(dim(temp.df.d)[1], min = min_diam.d, max = max_diam.d)
  temp.df.d[,4] <- runif(dim(temp.df.d)[1], min = min_dens.d, max = max_dens.d)
  temp.df.d[,5] <- shape.d
  
    #cyanos
    temp.df.c <- array(data = 0, dim = c(total_off_c, ind_cols))
    temp.df.c[,1] <- 2 #placeholder for taxon ID or some other trait
  temp.df.c[,2] <- env[j,2]
  temp.df.c[,3] <- runif(dim(temp.df.c)[1], min = min_diam.c, max = max_diam.c)
  temp.df.c[,4] <- runif(dim(temp.df.c)[1], min = min_dens.c, max = max_dens.c)
  temp.df.c[,5] <- shape.c
    
    #green algae
    temp.df.g <- array(data = 0, dim = c(total_off_g, ind_cols))
    temp.df.g[,1] <- 3 #placeholder for taxon ID or some other trait
  temp.df.g[,2] <- env[j,2]
  temp.df.g[,3] <- runif(dim(temp.df.g)[1], min = min_diam.g, max = max_diam.g)
  temp.df.g[,4] <- runif(dim(temp.df.g)[1], min = min_dens.g, max = max_dens.g)
  temp.df.g[,5] <- shape.g
  
  temp.df <- rbind(temp.df.d, temp.df.c, temp.df.g)
  new_inds <- rbind(new_inds, temp.df)
    }
    
    # ---- Our new offspring can now be attached in the inds array
    inds <- rbind(inds, new_inds);
    return(inds);
}
```

```{r}
# =============================================================================
# Death function
# =============================================================================
death <- function(inds, dcol = 6, yloc = 2, ymax = 9.3, pft = 1, graze_d = 0.35/60, graze_c = 0.35/60, graze_g = 0.35/60, light_exp = 8){
  total_inds <- dim(inds)[1] # Get the number of individuals in inds
  
  for(i in 1:total_inds){ 
    
    # Conduct bernoulli draws for death based on grazing rates for individual pfts
    if(inds[i, pft] == 1){ 
      inds[i, dcol] <- rbinom(1, 1, graze_d)
    }
    if(inds[i, pft] == 2){
      inds[i, dcol] <- rbinom(1, 1, graze_c)
    }
    if(inds[i, pft] == 3){
      inds[i, dcol] <- rbinom(1, 1, graze_g)
    }
    
    #update light exposure; individuals with no light for 24 hrs or more die
    SWR <- env[which(env[,2] == round(inds[i,2],1)),5]
    if(SWR < 1){inds[i, light_exp] <- inds[i, light_exp] + 1}
    if(inds[i, light_exp] >= 24*60){inds[i, dcol] <- 1}
    
    #anything at sediments dies
    if(inds[i, yloc] >= ymax){# If it moved to or past the maximum depth
      inds[i, dcol] <- 1;        # Then it dies
    }
  }
  
  inds            <- inds[inds[, dcol] == 0,]; # Retain living

    return(inds);
}
```

```{r}
# ========================================================
# Update environment
# ========================================================
update_env <- function(env, wtemp, swr, time_steps = 60*2, tstep = ts){
  
  ts = tstep
  
  update_times <- seq(from = 60, to = time_steps, by = 60)
  
  if(ts %in% update_times){
    
    #calculate which column of wtemp we want
    col <- 7+ts/60
    
    #update water temp column
    env[,1] <- unlist(wtemp[,col])
    
    #calculate which row of swr we want
    row <- 6+ts/60
    
    #update light column
    env[,5] <- exp(as.double(log(swr[row,2])) - 0.5*depths)

  }
  
  return(env)
  
}
```

```{r}
# =============================================================================
# Simulate phytoplankton dynamics
# =============================================================================
# ----- Initialise individuals (phytos)

fp <- read_csv("./data/FluoroProbe_2021-08-02_FCR_50.csv")

# Create inds by looping through each depth increment and then creating that number of individuals at that depth based on ug/L
inds <- array(data = 0, dim = c(0, 8))

depths <- seq(from = 0.1, to = 9.3, by = 0.1)

for(i in 1:length(depths)){
  
  #isolate a particular depth
  temp <- fp[i,]
  
  #create cell diameter trait
  min_diam.d = 10 # 10 um 
  max_diam.d = 25 # 25 um in meters
  
  min_diam.c = 10 # 10 um 
  max_diam.c = 25 # 25 um in meters
  
  min_diam.g = 10 # 10 um 
  max_diam.g = 25 # 25 um in meters

  #create cell density trait
  min_dens.d = 1070 # In range for diatoms
  max_dens.d = 1130 # To make sure they all sink
  
  min_dens.c = 920 # In range for cyanos
  max_dens.c = 980 # To make sure they all float
  
  min_dens.g = 1020 # In range for chlorophytes
  max_dens.g = 1080 # To make sure they all sink
  
  #create cell shape trait
  shape.d = 1 # make them all spherical for now
  
  shape.c = 1 # make them all spherical for now
  
  shape.g = 1 # make them all spherical for now

  #populate depths with traits
  temp.df.d <- array(data = 0, dim = c(round(temp$BrownAlgae_ugL,0),8))
  temp.df.d[,1] <- 1 #placeholder for taxon ID or some other trait
  temp.df.d[,2] <- depths[i]
  temp.df.d[,3] <- runif(dim(temp.df.d)[1], min = min_diam.d, max = max_diam.d)
  temp.df.d[,4] <- runif(dim(temp.df.d)[1], min = min_dens.d, max = max_dens.d)
  temp.df.d[,5] <- shape.d

  temp.df.c <- array(data = 0, dim = c(round(temp$Bluegreens_ugL,0),8))
  temp.df.c[,1] <- 2 #placeholder for taxon ID or some other trait
  temp.df.c[,2] <- depths[i]
  temp.df.c[,3] <- runif(dim(temp.df.c)[1], min = min_diam.c, max = max_diam.c)
  temp.df.c[,4] <- runif(dim(temp.df.c)[1], min = min_dens.c, max = max_dens.c)
  temp.df.c[,5] <- shape.c
  
  temp.df.g <- array(data = 0, dim = c(round(temp$GreenAlgae_ugL,0),8))
  temp.df.g[,1] <- 3 #placeholder for taxon ID or some other trait
  temp.df.g[,2] <- depths[i]
  temp.df.g[,3] <- runif(dim(temp.df.g)[1], min = min_diam.g, max = max_diam.g)
  temp.df.g[,4] <- runif(dim(temp.df.g)[1], min = min_dens.g, max = max_dens.g)
  temp.df.g[,5] <- shape.g
  
  temp.df <- rbind(temp.df.d, temp.df.c, temp.df.g)

  inds <- rbind(inds, temp.df)
}

colnames(inds) <- c("PFG","yloc","cell_diam","cell_dens","cell_shape","dcol","repr","light_exp")
```

```{r}
# ----- Initialise environment (water temperature)

env <- array(data = 0, dim = c(length(depths),5))

######### MANUALLY SIMULATED WATER TEMPERATURE ###########
  # env[,1] <- 5 #water temperature;  no stratification
  # env[,1] <- c(rev(seq(from = 15, to = 20, by = ((20-15)/(40-1)))),
  #              rev(seq(from = 12, to = 15, by = ((15-12)/(10-1)))),
  #              rev(seq(from = 10, to = 12, by = ((12-10)/(43-1))))) #water temperature; stronger stratification
  # env[,1] <- c(rev(seq(from = 13, to = 15, by = ((15-13)/(40-1)))),
  #              rev(seq(from = 11, to = 13, by = ((13-11)/(10-1)))),
  #              rev(seq(from = 10, to = 11, by = ((11-10)/(43-1))))) #water temperature; weaker stratification
######### MANUALLY SIMULATED WATER TEMPERATURE ###########

######### GLM WATER TEMPERATURE ##########################
wtemp <- read_csv("./data/cal_wtemp_GLM.csv") 
env[,1] <- unlist(wtemp[,7])
######### GLM WATER TEMPERATURE ##########################

# second column is depth
  env[,2] <- round(depths,1)

# fifth column is light
swr <- read_csv("./data/cal_met_GLM.csv")
  env[,5] <- exp(as.double(log(swr[6,2])) - 0.5*depths)
colnames(env) <- c("wt","yloc","dens","visc","light")

```

```{r}
# ---- Start the simulation as before
ts         <- 0;
time_steps <- 60*18;
inds_hist  <- NULL;
start_time <- Sys.time()
while(ts < time_steps){
    inds            <- movement(inds, env); 
    inds            <- birth(inds);
    inds            <- death(inds);
    ts              <- ts + 1; 
    env             <- update_env(env, wtemp, swr, time_steps = time_steps, tstep = ts);
    inds_hist[[ts]] <- inds;
    print(ts)
    print(length(inds[,1]))
}
end_time <- Sys.time()
run_time = end_time - start_time
print(run_time)
```

\

```{r}
# =============================================================================
# Print the results
# =============================================================================
ind_yloc <- NULL
ind_yloc[[1]] <- array(data = NA, dim = c(time_steps,length(depths)+1))
colnames(ind_yloc[[1]]) <- c("timestep",depths)

ind_yloc[[2]] <- array(data = NA, dim = c(time_steps,length(depths)+1))
colnames(ind_yloc[[2]]) <- c("timestep",depths)

ind_yloc[[3]] <- array(data = NA, dim = c(time_steps,length(depths)+1))
colnames(ind_yloc[[3]]) <- c("timestep",depths)

for(i in 1:time_steps){
  for(j in 1:length(depths)){
    
    #diatom
    ind_yloc[[1]][i, 1] <- i;                      # Save the time step
    ind_yloc[[1]][i, j+1] <- length(inds_hist[[i]][which(round(inds_hist[[i]][,2],1) == round(depths[j],1) & inds_hist[[i]][,1] == 1),1]); # Save the number of individuals at each depth
    
    #cyano
    ind_yloc[[2]][i, 1] <- i;                      # Save the time step
    ind_yloc[[2]][i, j+1] <- length(inds_hist[[i]][which(round(inds_hist[[i]][,2],1) == round(depths[j],1) & inds_hist[[i]][,1] == 2),1]); # Save the number of individuals at each depth
    
    #green
    ind_yloc[[3]][i, 1] <- i;                      # Save the time step
    ind_yloc[[3]][i, j+1] <- length(inds_hist[[i]][which(round(inds_hist[[i]][,2],1) == round(depths[j],1) & inds_hist[[i]][,1] == 3),1]); # Save the number of individuals at each depth
    
  }
}
#print(ind_yloc);
```

```{r}
# =============================================================================
# Plot the results
# =============================================================================

##plot the environment (for static simulations)
# plot_env = data.frame(wt = env[,1],
#                       yloc = env[,2],
#                       swr = env[,5])
# 
# ggplot(data = plot_env, aes(x = wt, y = yloc))+
#   geom_path()+
#   scale_y_reverse()+
#   theme_classic()+
#   xlab("degrees C")+
#   ylab("Depth (m)")+
#   ggtitle("Water temperature (degrees C)")
# 
# ggplot(data = plot_env, aes(x = swr, y = yloc))+
#   geom_path()+
#   scale_y_reverse()+
#   theme_classic()+
#   xlab("W m^-2")+
#   ylab("Depth (m)")+
#   ggtitle("Shortwave radiation")

##plot initial conditions
# fp_plot <- fp %>%
#   gather(GreenAlgae_ugL:TotalConcNoMixed_ugL, key = "spectral_group", value = "ugL")
# ggplot(data = fp_plot, aes(x = ugL, y = Depth_inc, group = spectral_group, color = spectral_group))+
#   geom_path()+
#   scale_y_reverse()+
#   theme_classic()+
#   xlab("ugL")+
#   ylab("Depth (m)")+
#   ggtitle("Initial conditions: FP cast")

##plot IBM output
plot_yloc.d <- data.frame(ind_yloc[[1]]) %>%
  gather(X0.1:X9.3, key = "Depth_m",value = "num_agents") %>%
  mutate(Depth_m = as.double(substring(Depth_m, 2)))
#head(plot_yloc.d)

ggplot(data = plot_yloc.d, aes(x = num_agents, y = Depth_m, group = timestep, color = timestep))+
  geom_path()+
  scale_y_reverse()+
  theme_classic()+
  ggtitle("Brown algae")

plot_ts.d <- plot_yloc.d %>%
  filter(Depth_m >= 0.1 & Depth_m <= 2) %>%
  group_by(timestep) %>%
  summarize(surface_agents = mean(num_agents))

ggplot(data = plot_ts.d, aes(x = timestep, y = surface_agents))+
  geom_line()+
  theme_bw()

plot_yloc.c <- data.frame(ind_yloc[[2]]) %>%
  gather(X0.1:X9.3, key = "Depth_m",value = "num_agents") %>%
  mutate(Depth_m = as.double(substring(Depth_m, 2)))
#head(plot_yloc.c)

ggplot(data = plot_yloc.c, aes(x = num_agents, y = Depth_m, group = timestep, color = timestep))+
  geom_path()+
  scale_y_reverse()+
  theme_classic()+
  ggtitle("Cyanobacteria")

plot_ts.c <- plot_yloc.c %>%
  filter(Depth_m >= 0.1 & Depth_m <= 2) %>%
  group_by(timestep) %>%
  summarize(surface_agents = mean(num_agents))

ggplot(data = plot_ts.c, aes(x = timestep, y = surface_agents))+
  geom_line()+
  theme_bw()

plot_yloc.g <- data.frame(ind_yloc[[3]]) %>%
  gather(X0.1:X9.3, key = "Depth_m",value = "num_agents") %>%
  mutate(Depth_m = as.double(substring(Depth_m, 2)))
#head(plot_yloc.g)

ggplot(data = plot_yloc.g, aes(x = num_agents, y = Depth_m, group = timestep, color = timestep))+
  geom_path()+
  scale_y_reverse()+
  theme_classic()+
  ggtitle("Green algae")

plot_ts.g <- plot_yloc.g %>%
  filter(Depth_m >= 0.1 & Depth_m <= 2) %>%
  group_by(timestep) %>%
  summarize(surface_agents = mean(num_agents))

ggplot(data = plot_ts.g, aes(x = timestep, y = surface_agents))+
  geom_line()+
  theme_bw()

plot_ts.all <- left_join(plot_ts.d, plot_ts.c, by = c("timestep")) %>%
  left_join(plot_ts.g, by = c("timestep")) %>%
  rename(diatom = surface_agents.x,
         cyano = surface_agents.y,
         green = surface_agents) %>%
  mutate(total = diatom + cyano + green) %>%
  gather(diatom:total, key = pft, value = num_agents)

ggplot(data = plot_ts.all, aes(x = timestep, y = num_agents, group = pft, color = pft)) +
  geom_line()+
  theme_bw()

plot_ts.prop <- left_join(plot_ts.d, plot_ts.c, by = c("timestep")) %>%
  left_join(plot_ts.g, by = c("timestep")) %>%
  rename(diatom = surface_agents.x,
         cyano = surface_agents.y,
         green = surface_agents) %>%
  mutate(total = diatom + cyano + green) %>%
  mutate(total_prop = total/total*100,
         diatom_prop = diatom/total*100,
         cyano_prop = cyano/total*100,
         green_prop = green/total*100) %>%
  select(timestep, diatom_prop, cyano_prop, green_prop, total_prop) %>%
  gather(diatom_prop:total_prop, key = pft, value = prop_agents)

ggplot(data = plot_ts.prop, aes(x = timestep, y = prop_agents, group = pft, color = pft)) +
  geom_line()+
  theme_bw()

# #Write output to file for plotting for proposal
write.csv(plot_yloc.d, file = "./ABM_output/ABM_diatom_depthByTimestep_18hr.csv", row.names = FALSE)
write.csv(plot_ts.d, file = "./ABM_output/ABM_diatom_surfaceTimeseries_18hr.csv", row.names = FALSE)

write.csv(plot_yloc.c, file = "./ABM_output/ABM_cyano_depthByTimestep_18hr.csv", row.names = FALSE)
write.csv(plot_ts.c, file = "./ABM_output/ABM_cyano_surfaceTimeseries_18hr.csv", row.names = FALSE)

write.csv(plot_yloc.g, file = "./ABM_output/ABM_green_depthByTimestep_18hr.csv", row.names = FALSE)
write.csv(plot_ts.g, file = "./ABM_output/ABM_green_surfaceTimeseries_18hr.csv", row.names = FALSE)

write.csv(plot_ts.all, file = "./ABM_output/ABM_all_surfaceTimeseries_18hr.csv",row.names = FALSE)
write.csv(plot_ts.prop, file = "./ABM_output/ABM_allProp_surfaceTimeseries_18hr.csv",row.names = FALSE)

saveRDS(inds_hist, file = "ABM_output_18hr.rds")
```
