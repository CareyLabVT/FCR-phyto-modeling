---
title: "example_IBM"
author: "Brad Duthie"
format: html
editor: visual
---

## Source of tutorial

The example code below is pulled from <https://bradduthie.github.io/blog/individual-based-models-in-r/>.

## Modification workflow

1.  Random movement in one dimension of individuals seeded from a simulated depth profile, with a "sticky" upper/lower boundary
    1.  Eliminate x-dimension - check

    2.  Individuals move in increments of 0.1 m - check

    3.  Create "sticky" boundaries (individuals who move past the boundary are put back at the edge) - check

    4.  Seed individuals based on a depth profile from 0-9.3 m in 0.1 m increments, using an actual FP profile as a starting point - check

    5.  Eliminate birth and death for now and predators altogether - check

    6.  Alter plot so that you can see how individuals are moving over depth/time - check
2.  Movement of individuals given static water temp profile using turbulence/diffusion equation
    1.  Create a new dataframe for environmental conditions that can be referenced during model run (columns for now are depth, water temperature); start w/ constant water temperature so can see if phytos move towards constant distribution across depth over time - check

    2.  Figure out what other environmental conditions/traits need to be specified to provide all the correct information to eq. 9 of Hassan Ranjbar, Hamilton, et al. - check

        1.  cell density: \~950 kg m-3 for buoyant cyanos; \~1100 kg m-3 for diatoms (reference Reynolds 2006)

        2.  cell diameter: in meters; thinking somewhere in 10-20 um for FCR since cells usually small

        3.  cell shape: use 1 as a starting point (assuming spherical shape)

    3.  Add necessary environmental conditions/traits to environmental dataframe and inds, respectively

        1.  need to calculate dynamic (absolute) viscosity of water; use Korson et al. 1969

        2.  what eq to use to calculate water density from temperature? think might assume pure water for now and use Kell equation (Kell, 1975), then can go from there

    4.  Edit "movement" function to use eq. 9 instead of random movement

        1.  first, just incorporate buoyancy/sinking rate term and make sure phytos are behaving as expected in stratified and unstratified conditions - check

        2.  next, worry about random walk to simulate turbulent transport --\> I need velocity to do this I think? or maybe not?; look at S&H book and bring up in plumbing mtg

    5.  Edit "death" function

        1.  agents that reach the sediments die - check

        2.  agents can also be grazed, which should occur at different rates depending on the taxon; see p. 299 of Reynolds; "brown algae" and green algae should have highest rate, as Cryptomonas is \~100%, Asterionella is \>50% in the summer, and small chlorophytes ("Ankyra"), such as found in FCR, are almost 100% - check

        3.  **after build in light-dependent growth, could also keep track of light exposure and if an agent has seen no light for 24 hrs, it dies**

        4.  what to do about endless cyano scums accumulating at the surface? (i.e., how to kill them? photorespiration?)

    6.  Edit "growth" function

        1.  temperature-dependent growth rate, adapted from AED; probability of doubling is determined by temperature - check

        2.  **add light column to environment; this will be calculated based on some incoming SWR and some Kd**

        3.  **light-dependent growth rate, adapted from AED; probability of doubling is determined by maximum (or minimum? or multiplied?) probability between temp and light functions**

```{r}
# =============================================================================
# Load packages
# =============================================================================
library(tidyverse)


```

```{r}
# =============================================================================
# Movement function
# =============================================================================
movement <- function(inds, yloc = 2, ymax = 9.3){
  
  total_inds <- dim(inds)[1]
  
  cell_diam <- inds[,3] # Get the cell diameters of all individuals
  cell_dens <- inds[,4] # Get the cell diameters of all individuals
  cell_shape <- inds[,5] # Get the cell diameters of all individuals

  env[,3] <- (999.83952 + 16.945176*env[,1] - 0.0079870401*env[,1]^2 - 0.000046170461*env[,1]^3 + 0.00000010556302*env[,1]^4 - 0.00000000028054253*env[,1]^5) / (1 + 0.016879850*env[,1]) #Kell equation for water density (Kell, 1975)
  env[,4] <- (10^(((20 - env[,1])/(env[,1] + 96))*(1.2364 - 0.00137*(20 - env[,1]) + 0.0000057*(20 - env[,1])^2)))*1000 #this actually calculates the ratio of viscosity at target temp/viscosity at 20 degrees C, but viscosity at 20 degrees C is ~ 1
  w_s <- NULL
  
  for(j in 1:total_inds){
      
    #the issue is that for some reason it's not recognizing when the yloc matches the depth in the environment - why???
    curr_dens <- env[which(env[,2] == round(inds[j,2],1)),3]
    curr_visc <- env[which(env[,2] == round(inds[j,2],1)),4]

    curr_w_s <- (9.8081*cell_diam[j]^2*(cell_dens[j] - curr_dens))/(18*cell_shape[j]*curr_visc) # Define the velocity given cell diameter, density, and shape
    
    w_s <- c(w_s, curr_w_s)
    
    }
    
  y_move       <- (w_s/100000)*60*60 # Calculate total distance moved over an hour
  
  inds[, yloc] <- inds[, yloc] + y_move;
  # =========   The reflecting boundary is added below
    for(i in 1:total_inds){ 
        if(inds[i, yloc] > ymax){         # If it moved past the maximum depth
            inds[i, yloc] <- ymax;        # Then move it back to the maximum depth
        }
        if(inds[i, yloc] < 0.1){            # If it moved below 0.1 (above surface)
            inds[i, yloc] <- 0.1;           # Then move it back to 0.1 (surface)
        }
    } 
    # =========  Now all individuals should stay on the landscape
    return(inds);
}
```

```{r}
# =============================================================================
# Birth function
# =============================================================================
## define traits for PFTs
traits_lst <- list(
  #create cell diameter trait
  min_diam.d = 10, # 10 um 
  max_diam.d = 25, # 25 um in meters
  
  min_diam.c = 10, # 10 um 
  max_diam.c = 25, # 25 um in meters
  
  min_diam.g = 10, # 10 um 
  max_diam.g = 25, # 25 um in meters

  #create cell density trait
  min_dens.d = 1070, # In range for diatoms
  max_dens.d = 1130, # To make sure they all sink
  
  min_dens.c = 920, # In range for cyanos
  max_dens.c = 980, # To make sure they all float
  
  min_dens.g = 1020, # In range for chlorophytes
  max_dens.g = 1080, # To make sure they all sink
  
  #create cell shape trait
  shape.d = 1, # make them all spherical for now
  
  shape.c = 1, # make them all spherical for now
  
  shape.g = 1, # make them all spherical for now
  
  #create temperature sensitivity traits
  Tmin = c(4,4,4),
  Topt = c(20,23,15),
  Tmax = c(26,30,20)
)

birth <- function(inds, repr_col = 7, traits = traits_lst){
    total_inds       <- dim(inds)[1]; # Get the number of individuals in inds
    ind_cols         <- dim(inds)[2]; # Total inds columns
    
    #unpack traits
    min_diam.d = traits$min_diam.d
    max_diam.d = traits$max_diam.d
    min_diam.c = traits$min_diam.c
    max_diam.c = traits$max_diam.c
    min_diam.g = traits$min_diam.g
    max_diam.g = traits$max_diam.g
    min_dens.d = traits$min_dens.d
    max_dens.d = traits$max_dens.d
    min_dens.c = traits$min_dens.c
    max_dens.c = traits$max_dens.c
    min_dens.g = traits$min_dens.g
    max_dens.g = traits$max_dens.g
    shape.d = traits$shape.d
    shape.c = traits$shape.c
    shape.g = traits$shape.g
    Tmin = traits$Tmin
    Topt = traits$Topt
    Tmax = traits$Tmax
    
    ###Temp-dependent growth
    for(i in 1:total_inds){
      
      #get water temp where individual is located
      TEMP <- env[which(env[,2] == round(inds[i,2],1)),1]
      
      if(inds[i,1] == 1){ #diatoms
    fT = ((TEMP - Tmin[1]) / (Topt[1] - Tmin[1])) *((Tmax[1] - TEMP) / (Tmax[1] - Topt[1])) ^((Tmax[1] - Topt[1]) / (Topt[1] - Tmin[1]))
  if(fT < 0 | is.na(fT)){fT <- 0}
      }
      
      if(inds[i,1] == 2){ #cyanos
    fT = ((TEMP - Tmin[2]) / (Topt[2] - Tmin[2])) *((Tmax[2] - TEMP) / (Tmax[2] - Topt[2])) ^((Tmax[2] - Topt[2]) / (Topt[2] - Tmin[2]))
  if(fT < 0 | is.na(fT)){fT <- 0}
      }
      
      if(inds[i,1] == 3){ #green algae
    fT = ((TEMP - Tmin[3]) / (Topt[3] - Tmin[3])) *((Tmax[3] - TEMP) / (Tmax[3] - Topt[3])) ^((Tmax[3] - Topt[3]) / (Topt[3] - Tmin[3]))
  if(fT < 0 | is.na(fT)){fT <- 0}
      }
      
    inds[i, repr_col] <- rbinom(n = 1, size = 1, prob = fT/24) 

    }
    
    #make array for offspring
    new_inds <- array(data = 0, dim = c(0, ind_cols))
    
    #figure out how many offspring of each PFT per depth
    for(j in 1:length(env[,2])){
      
    total_off_d <- sum(inds[which(inds[,1] == 1 & round(inds[,2],1) == env[j,2]), repr_col])
    total_off_c <- sum(inds[which(inds[,1] == 2 & round(inds[,2],1) == env[j,2]), repr_col])
    total_off_g <- sum(inds[which(inds[,1] == 3 & round(inds[,2],1) == env[j,2]), repr_col])

    # ---- We now have the total number of new offspring for each PFT at this depth; now add traits
    
    #diatoms
    temp.df.d <- array(data = 0, dim = c(total_off_d, ind_cols))
    temp.df.d[,1] <- 1 #placeholder for taxon ID or some other trait
  temp.df.d[,2] <- env[j,2]
  temp.df.d[,3] <- runif(dim(temp.df.d)[1], min = min_diam.d, max = max_diam.d)
  temp.df.d[,4] <- runif(dim(temp.df.d)[1], min = min_dens.d, max = max_dens.d)
  temp.df.d[,5] <- shape.d
  
    #cyanos
    temp.df.c <- array(data = 0, dim = c(total_off_c, ind_cols))
    temp.df.c[,1] <- 2 #placeholder for taxon ID or some other trait
  temp.df.c[,2] <- env[j,2]
  temp.df.c[,3] <- runif(dim(temp.df.c)[1], min = min_diam.c, max = max_diam.c)
  temp.df.c[,4] <- runif(dim(temp.df.c)[1], min = min_dens.c, max = max_dens.c)
  temp.df.c[,5] <- shape.c
    
    #green algae
    temp.df.g <- array(data = 0, dim = c(total_off_g, ind_cols))
    temp.df.g[,1] <- 3 #placeholder for taxon ID or some other trait
  temp.df.g[,2] <- env[j,2]
  temp.df.g[,3] <- runif(dim(temp.df.g)[1], min = min_diam.g, max = max_diam.g)
  temp.df.g[,4] <- runif(dim(temp.df.g)[1], min = min_dens.g, max = max_dens.g)
  temp.df.g[,5] <- shape.g
  
  temp.df <- rbind(temp.df.d, temp.df.c, temp.df.g)
  new_inds <- rbind(new_inds, temp.df)
    }
    
    # ---- Our new offspring can now be attached in the inds array
    inds <- rbind(inds, new_inds);
    return(inds);
}
```

```{r}
# =============================================================================
# Death function
# =============================================================================
death <- function(inds, dcol = 6, yloc = 2, ymax = 9.3, pft = 1,
                  graze_d = 0.8/24, graze_c = 0.4/24, graze_g = 0.6/24){
  total_inds <- dim(inds)[1] # Get the number of individuals in inds
  
  for(i in 1:total_inds){ 

    if(inds[i, yloc] >= ymax){# If it moved to or past the maximum depth
      inds[i, dcol] <- 1;        # Then it dies
    }
    # Conduct bernoulli draws for death based on grazing rates for individual pfts
    if(inds[i, pft] == 1){ 
      inds[i, dcol] <- rbinom(1, 1, graze_d)
    }
    if(inds[i, pft] == 2){
      inds[i, dcol] <- rbinom(1, 1, graze_c)
    }
    if(inds[i, pft] == 3){
      inds[i, dcol] <- rbinom(1, 1, graze_g)
    }
  }
  
  inds            <- inds[inds[, 6] == 0,]; # Retain living

    return(inds);
}
```

```{r}
# =============================================================================
# Simulate phytoplankton dynamics
# =============================================================================
# ----- Initialise individuals (phytos)

fp <- read_csv("./data/FluoroProbe_2018-08-02_FCR_50.csv")

# Create inds by looping through each depth increment and then creating that number of individuals at that depth based on ug/L
depths <- seq(from = 0.1, to = 9.3, by = 0.1)

inds <- array(data = 0, dim = c(0, 7))

for(i in 1:length(depths)){
  
  #isolate a particular depth
  temp <- fp[i,]
  
  #create cell diameter trait
  min_diam.d = 10 # 10 um 
  max_diam.d = 25 # 25 um in meters
  
  min_diam.c = 10 # 10 um 
  max_diam.c = 25 # 25 um in meters
  
  min_diam.g = 10 # 10 um 
  max_diam.g = 25 # 25 um in meters

  #create cell density trait
  min_dens.d = 1070 # In range for diatoms
  max_dens.d = 1130 # To make sure they all sink
  
  min_dens.c = 920 # In range for cyanos
  max_dens.c = 980 # To make sure they all float
  
  min_dens.g = 1020 # In range for chlorophytes
  max_dens.g = 1080 # To make sure they all sink
  
  #create cell shape trait
  shape.d = 1 # make them all spherical for now
  
  shape.c = 1 # make them all spherical for now
  
  shape.g = 1 # make them all spherical for now

  #populate depths with traits
  temp.df.d <- array(data = 0, dim = c(round(temp$BrownAlgae_ugL,0),7))
  temp.df.d[,1] <- 1 #placeholder for taxon ID or some other trait
  temp.df.d[,2] <- depths[i]
  temp.df.d[,3] <- runif(dim(temp.df.d)[1], min = min_diam.d, max = max_diam.d)
  temp.df.d[,4] <- runif(dim(temp.df.d)[1], min = min_dens.d, max = max_dens.d)
  temp.df.d[,5] <- shape.d

  temp.df.c <- array(data = 0, dim = c(round(temp$Bluegreens_ugL,0),7))
  temp.df.c[,1] <- 2 #placeholder for taxon ID or some other trait
  temp.df.c[,2] <- depths[i]
  temp.df.c[,3] <- runif(dim(temp.df.c)[1], min = min_diam.c, max = max_diam.c)
  temp.df.c[,4] <- runif(dim(temp.df.c)[1], min = min_dens.c, max = max_dens.c)
  temp.df.c[,5] <- shape.c
  
  temp.df.g <- array(data = 0, dim = c(round(temp$GreenAlgae_ugL,0),7))
  temp.df.g[,1] <- 3 #placeholder for taxon ID or some other trait
  temp.df.g[,2] <- depths[i]
  temp.df.g[,3] <- runif(dim(temp.df.g)[1], min = min_diam.g, max = max_diam.g)
  temp.df.g[,4] <- runif(dim(temp.df.g)[1], min = min_dens.g, max = max_dens.g)
  temp.df.g[,5] <- shape.g
  
  temp.df <- rbind(temp.df.d, temp.df.c, temp.df.g)

  inds <- rbind(inds, temp.df)
}

colnames(inds) <- c("PFG","yloc","cell_diam","cell_dens","cell_shape","dcol","repr")
```

```{r}
# ----- Initialise environment (water temperature)

env <- array(data = 0, dim = c(length(depths),4))
  # env[,1] <- 5 #water temperature;  no stratification
  env[,1] <- c(rev(seq(from = 15, to = 20, by = ((20-15)/(40-1)))),
               rev(seq(from = 12, to = 15, by = ((15-12)/(10-1)))),
               rev(seq(from = 10, to = 12, by = ((12-10)/(43-1))))) #water temperature; stronger stratification
  # env[,1] <- c(rev(seq(from = 13, to = 15, by = ((15-13)/(40-1)))),
  #              rev(seq(from = 11, to = 13, by = ((13-11)/(10-1)))),
  #              rev(seq(from = 10, to = 11, by = ((11-10)/(43-1))))) #water temperature; weaker stratification
  env[,2] <- round(depths,1)
colnames(env) <- c("wt","yloc","dens","visc")
```

```{r}
# ---- Start the simulation as before
ts         <- 0;
time_steps <- 24*7;
inds_hist  <- NULL;
start_time <- Sys.time()
while(ts < time_steps){
    inds            <- movement(inds); 
    inds            <- birth(inds);
    inds            <- death(inds);
    ts              <- ts + 1; 
    inds_hist[[ts]] <- inds;
    print(ts)
    print(length(inds[,1]))
}
end_time <- Sys.time()
run_time = end_time - start_time
print(run_time)
```

```{r}
# =============================================================================
# Print the results
# =============================================================================
ind_yloc <- NULL
ind_yloc[[1]] <- array(data = NA, dim = c(time_steps,length(depths)+1))
colnames(ind_yloc[[1]]) <- c("timestep",depths)

ind_yloc[[2]] <- array(data = NA, dim = c(time_steps,length(depths)+1))
colnames(ind_yloc[[2]]) <- c("timestep",depths)

ind_yloc[[3]] <- array(data = NA, dim = c(time_steps,length(depths)+1))
colnames(ind_yloc[[3]]) <- c("timestep",depths)

for(i in 1:time_steps){
  for(j in 1:length(depths)){
    
    #diatom
    ind_yloc[[1]][i, 1] <- i;                      # Save the time step
    ind_yloc[[1]][i, j+1] <- length(inds_hist[[i]][which(round(inds_hist[[i]][,2],1) == round(depths[j],1) & inds_hist[[i]][,1] == 1),1]); # Save the number of individuals at each depth
    
    #cyano
    ind_yloc[[2]][i, 1] <- i;                      # Save the time step
    ind_yloc[[2]][i, j+1] <- length(inds_hist[[i]][which(round(inds_hist[[i]][,2],1) == round(depths[j],1) & inds_hist[[i]][,1] == 2),1]); # Save the number of individuals at each depth
    
    #green
    ind_yloc[[3]][i, 1] <- i;                      # Save the time step
    ind_yloc[[3]][i, j+1] <- length(inds_hist[[i]][which(round(inds_hist[[i]][,2],1) == round(depths[j],1) & inds_hist[[i]][,1] == 3),1]); # Save the number of individuals at each depth
    
  }
}
#print(ind_yloc);
```

```{r}
# =============================================================================
# Plot the results
# =============================================================================
plot_yloc.d <- data.frame(ind_yloc[[1]]) %>%
  gather(X0.1:X9.3, key = "Depth_m",value = "ugL") %>%
  mutate(Depth_m = as.double(substring(Depth_m, 2)))
#head(plot_yloc.d)

ggplot(data = plot_yloc.d, aes(x = ugL, y = Depth_m, group = timestep, color = timestep))+
  geom_path()+
  scale_y_reverse()+
  theme_classic()

plot_yloc.c <- data.frame(ind_yloc[[2]]) %>%
  gather(X0.1:X9.3, key = "Depth_m",value = "ugL") %>%
  mutate(Depth_m = as.double(substring(Depth_m, 2)))
#head(plot_yloc.c)

ggplot(data = plot_yloc.c, aes(x = ugL, y = Depth_m, group = timestep, color = timestep))+
  geom_path()+
  scale_y_reverse()+
  theme_classic()

plot_yloc.g <- data.frame(ind_yloc[[3]]) %>%
  gather(X0.1:X9.3, key = "Depth_m",value = "ugL") %>%
  mutate(Depth_m = as.double(substring(Depth_m, 2)))
#head(plot_yloc.g)

ggplot(data = plot_yloc.g, aes(x = ugL, y = Depth_m, group = timestep, color = timestep))+
  geom_path()+
  scale_y_reverse()+
  theme_classic()
```
